name: Release Build
on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch'
        required: true
        default: 'main'
      tag:
        description: 'Release Tag'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    env:
      GO111MODULE: "on"
    steps:
      - name: Checkout code into the Go module directory
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          check-latest: true
          cache: true
        id: go

      - name: Check license headers
        run: make validate

      - name: Run golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b . v1.51.1
          ./golangci-lint run

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    defaults:
      run:
        shell: bash
    env:
      GO111MODULE: "on"
      GITHUB_WORKFLOW_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    steps:
      - name: Install Docker CLI
        if: ${{ matrix.os == 'macos-latest' }}
        # Only the CLI is needed to run docker-scan e2e
        run: brew install docker

      - name: Checkout code into the Go module directory
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          check-latest: true
          cache: true
        id: go

      - name: Build binary
        env:
          E2E_TEST_AUTH_TOKEN: ${{ secrets.E2E_TEST_AUTH_TOKEN }}
          E2E_HUB_URL: ${{ secrets.E2E_HUB_URL }}
          E2E_HUB_USERNAME: ${{ secrets.E2E_HUB_USERNAME }}
          E2E_HUB_TOKEN: ${{ secrets.E2E_HUB_TOKEN }}
        run: make TAG_NAME=${{ github.event.inputs.tag }} -f builder.Makefile build

      - name: Build Mac arm64 binary
        if: ${{ matrix.os == 'macos-latest' }}
        run: make TAG_NAME=${{ github.event.inputs.tag }} -f builder.Makefile build-mac-arm64

      - name: Build Linux arm64 binary
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: make TAG_NAME=${{ github.event.inputs.tag }} -f builder.Makefile build-linux-arm64

      - name: Upload binary artifact
        if: ${{ github.event.inputs.tag != '' }} # don't push artifacts if no tag is specified
        uses: actions/upload-artifact@v2
        with:
          name: docker-scan-${{ matrix.os}}
          path: ./bin/

      - name: ON SUCCESS - Slack notification
        if: ${{ success() }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":":heavy_check_mark: <${{ env.GITHUB_WORKFLOW_URL }}|docker scan cli plugin Weekly Build SUCCESS> on ${{ matrix.os}}"}' ${{ secrets.SLACK_WEBHOOK }}
      - name: ON FAILURE - Slack notification
        if: ${{ failure() }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":":no_entry_sign: <${{ env.GITHUB_WORKFLOW_URL }}|docker scan cli plugin Weekly Build FAILED> on ${{ matrix.os}}"}' ${{ secrets.SLACK_WEBHOOK }}
      - name: ON CANCELLED - Slack notification
        if: ${{ cancelled() }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":":bangbang: <${{ env.GITHUB_WORKFLOW_URL }}|docker scan cli plugin Weekly Build CANCELED> on ${{ matrix.os}}"}' ${{ secrets.SLACK_WEBHOOK }}

  release:
    runs-on: ubuntu-latest
    needs: [lint, build]
    if: ${{ github.event.inputs.tag != '' }} # don't release if no tag is specified
    env:
      E2E_TEST_AUTH_TOKEN: ${{ secrets.E2E_TEST_AUTH_TOKEN }}
      GITHUB_WORKFLOW_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: dist

      - name: Ship it
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*/*"
          prerelease: true
          draft: true
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.event.inputs.tag }}
      - name: ON SUCCESS - Slack notification
        if: ${{ success() }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":":heavy_check_mark: <${{ env.GITHUB_WORKFLOW_URL }}|docker scan cli plugin has been released> ${{ github.event.inputs.tag }}"}' ${{ secrets.SLACK_WEBHOOK }}
